(module(import "imports" "log" (func $printInt (param i32)))(import "imports" "getTime" (func $time(result i32)))(import "graphics" "draw" (func $draw (param i32)(param i32)(param i32)))(import "graphics" "reqNextFrame" (func $finishDrawing))(import "graphics" "clearScreen" (func $clearScreen))(import "graphics" "drawRectangle" (func $__drawRectangle (param i32)(param i32)(param i32)(param i32)))(import "graphics" "setDrawColor" (func $__setDrawColor (param i32)(param i32)(param i32)))(import "graphics" "drawLine" (func $__drawLine (param i32)(param i32)(param i32)(param i32)))(memory (export "memory") 1)(func $factorial(param $a i32)(result i32)(local $i i32)(local $retVal i32)(local.get $a)(i32.const 1)(i32.eq)(if (then (i32.const 1)(return))(else ))(local.set $retVal(local.get $a))(local.set $i(local.get $a)(i32.const 1)(i32.sub))(local.get $i)(i32.const 0)(i32.gt_s)(if (then (loop $pHqghUmeaY(local.set $retVal(local.get $retVal)(local.get $i)(i32.mul))(local.set $i(i32.add (local.get $i)(i32.const 1)(i32.const -1)(i32.mul)))(local.get $i)(i32.const 0)(i32.gt_s)(br_if $pHqghUmeaY))))(local.get $retVal)(return))(func $abs(param $a i32)(result i32)(local.get $a)(local.get $a)(i32.const 0)(i32.gt_s)(local.get $a)(i32.const 0)(i32.lt_s)(i32.sub)(i32.mul)(return))(func $pow(param $base i32)(param $exp i32)(result i32)(local $ogBase i32)(local $i i32)(local.set $i(i32.const 1))(local.set $ogBase(local.get $base))(local.get $i)(local.get $exp)(i32.lt_s)(if (then (loop $lNlfdXfirc(local.set $base(local.get $base)(local.get $ogBase)(i32.mul))(local.set $i(i32.add (local.get $i)(i32.const 1)))(local.get $i)(local.get $exp)(i32.lt_s)(br_if $lNlfdXfirc))))(local.get $base)(return))(func $FP2I(param $a i32)(result i32)(local.get $a)(i32.const 16)(i32.div_s)(return))(func $I2FP(param $a i32)(result i32)(local.get $a)(i32.const 16)(i32.mul)(return))(func $GetHighOutOfFour(param $a i32)(param $b i32)(param $c i32)(param $d i32)(result i32)(local.get $a)(local.get $b)(i32.gt_s)(i32.const 0)(i32.ne)(local.get $a)(local.get $c)(i32.gt_s)(i32.const 0)(i32.ne)(local.get $a)(local.get $d)(i32.gt_s)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(if (then (i32.const 0)(return))(else ))(local.get $b)(local.get $a)(i32.gt_s)(i32.const 0)(i32.ne)(local.get $b)(local.get $c)(i32.gt_s)(i32.const 0)(i32.ne)(local.get $b)(local.get $d)(i32.gt_s)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(if (then (i32.const 1)(return))(else ))(local.get $c)(local.get $a)(i32.gt_s)(i32.const 0)(i32.ne)(local.get $c)(local.get $b)(i32.gt_s)(i32.const 0)(i32.ne)(local.get $c)(local.get $d)(i32.gt_s)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(if (then (i32.const 2)(return))(else ))(i32.const 3)(return))(global $randNext (mut i32)(i32.const 69420))(global $RAND_MAX (mut i32)(i32.const 65535))(func $srand(param $seed i32)(global.set $randNext(local.get $seed)))(func $rand(result i32)(global.set $randNext(i32.add (global.get $randNext)(i32.const 1103515245)(i32.mul)(i32.const 12345)))(i32.add (global.get $randNext)(global.get $RAND_MAX)(i32.rem_s)(i32.const 1))(return))(func $sqrt(param $a i32)(result i32)(local $mid i32)(local $l i32)(local $s i32)(local.get $a)(i32.const 0)(i32.lt_s)(if (then (i32.const 1)(i32.const -1)(i32.mul)(return))(else ))(local.set $s(i32.const 1))(local.set $l(local.get $a))(local.set $mid(i32.const 0))(local.get $s)(i32.add (local.get $l)(i32.const 1))(i32.lt_s)(i32.const 0)(i32.ne)(local.get $mid)(local.get $mid)(i32.mul)(local.get $a)(i32.ne)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(if (then (loop $vsCxgGBwKf(local.set $mid(i32.add (local.get $s)(local.get $l))(i32.const 2)(i32.div_s))(local.get $mid)(local.get $mid)(i32.mul)(local.get $a)(i32.lt_s)(if (then (local.set $s(i32.add (local.get $mid)(i32.const 1))))(else (local.set $l(local.get $mid)(i32.const 1)(i32.sub))))(local.set $mid(i32.add (local.get $s)(local.get $l))(i32.const 2)(i32.div_s))(local.get $s)(i32.add (local.get $l)(i32.const 1))(i32.lt_s)(i32.const 0)(i32.ne)(local.get $mid)(local.get $mid)(i32.mul)(local.get $a)(i32.ne)(i32.const 0)(i32.ne)(i32.add)(i32.const 2)(i32.eq)(br_if $vsCxgGBwKf))))(local.get $mid)(return))(func $sin(param $a i32)(result i32)(local $oddNumFromI i32)(local $numMul i32)(local $res i32)(local $i i32)(local.set $i(i32.const 0))(local.set $res(i32.const 0))(local.set $numMul(i32.const 0))(local.get $i)(i32.const 6)(i32.lt_s)(if (then (loop $nqDuxwfnfO(local.get $i)(i32.const 2)(i32.rem_s)(i32.const 0)(i32.eq)(if (then (local.set $numMul(i32.const 1)))(else (local.set $numMul(i32.const 1)(i32.const -1)(i32.mul))))(local.set $oddNumFromI(i32.add (local.get $i)(i32.const 2)(i32.mul)(i32.const 1)))(local.get $oddNumFromI)(call $factorial)(call $printInt)(local.set $res(i32.add (local.get $res)(local.get $numMul)(local.get $a)(local.get $oddNumFromI)(call $pow)(local.get $oddNumFromI)(call $factorial)(i32.div_s)(i32.mul)))(local.set $i(i32.add (local.get $i)(i32.const 1)))(local.get $i)(i32.const 6)(i32.lt_s)(br_if $nqDuxwfnfO))))(local.get $res)(return))(global $C_BLK (mut i32)(i32.const 0))(global $C_BLU (mut i32)(i32.const 1))(global $C_RED (mut i32)(i32.const 2))(global $C_GRN (mut i32)(i32.const 3))(global $C_YLW (mut i32)(i32.const 4))(global $SCREEN_WIDTH (mut i32)(i32.const 1280))(global $SCREEN_HEIGHT (mut i32)(i32.const 720))(global $__drawR (mut i32)(i32.const 0))(global $__drawG (mut i32)(i32.const 0))(global $__drawB (mut i32)(i32.const 0))(func $SetDrawColor(param $color i32)(local.get $color)(global.get $C_BLK)(i32.eq)(if (then (global.set $__drawR(i32.const 0))(global.set $__drawG(i32.const 0))(global.set $__drawB(i32.const 0)))(else (local.get $color)(global.get $C_BLU)(i32.eq)(if (then (global.set $__drawR(i32.const 0))(global.set $__drawG(i32.const 0))(global.set $__drawB(i32.const 255)))(else (local.get $color)(global.get $C_RED)(i32.eq)(if (then (global.set $__drawR(i32.const 255))(global.set $__drawG(i32.const 0))(global.set $__drawB(i32.const 0)))(else (local.get $color)(global.get $C_GRN)(i32.eq)(if (then (global.set $__drawR(i32.const 0))(global.set $__drawG(i32.const 255))(global.set $__drawB(i32.const 0)))(else (local.get $color)(global.get $C_YLW)(i32.eq)(if (then (global.set $__drawR(i32.const 255))(global.set $__drawG(i32.const 238))(global.set $__drawB(i32.const 0)))(else (return)))))))))))(global.get $__drawR)(global.get $__drawG)(global.get $__drawB)(call $__setDrawColor))(func $DrawRectangle(param $rx i32)(param $ry i32)(param $rw i32)(param $rh i32)(local.get $rx)(local.get $ry)(local.get $rw)(local.get $rh)(call $__drawRectangle))(func $ScreenWidth(global.get $SCREEN_WIDTH)(return))(func $ScreenHeight(global.get $SCREEN_HEIGHT)(return))(func $DrawLine(param $x1 i32)(param $y1 i32)(param $x2 i32)(param $y2 i32)(local.get $x1)(local.get $y1)(local.get $x2)(local.get $y2)(call $__drawLine))(global $frame (mut i32)(i32.const 0))(global $prevValue (mut i32)(i32.const 0))(func $DrawFactorialGraph(param $x i32)(local $newValue i32)(local.set $newValue(global.get $SCREEN_HEIGHT)(local.get $x)(call $factorial)(i32.sub))(i32.add (i32.const 2)(i32.const 8)(call $pow)(local.get $x)(i32.const 1)(i32.sub))(global.get $prevValue)(i32.add (local.get $x)(i32.const 2)(i32.const 8)(call $pow))(local.get $newValue)(call $DrawLine)(global.set $prevValue(local.get $newValue)))(func $DrawGraphLine(param $x i32)(param $newValue i32)(i32.add (i32.const 2)(i32.const 8)(call $pow)(local.get $x)(i32.const 1)(i32.sub))(global.get $SCREEN_HEIGHT)(global.get $prevValue)(i32.sub)(i32.const 720)(i32.const 2)(i32.div_s)(i32.sub)(i32.add (local.get $x)(i32.const 2)(i32.const 8)(call $pow))(global.get $SCREEN_HEIGHT)(local.get $newValue)(i32.sub)(i32.const 720)(i32.const 2)(i32.div_s)(i32.sub)(call $DrawLine))(func $DrawQuadraticGraph(param $x i32)(param $exp i32)(local $newValue i32)(local.set $newValue(local.get $x)(local.get $exp)(call $pow))(local.get $x)(local.get $newValue)(call $DrawGraphLine)(global.set $prevValue(local.get $newValue)))(func $DrawSqrtGraph(param $x i32)(local $newValue i32)(local.set $newValue(global.get $frame)(call $sqrt))(local.get $newValue)(i32.const 1)(i32.const -1)(i32.mul)(i32.eq)(if (then (loop $zvSRtkJPRE(global.set $frame(i32.add (global.get $frame)(i32.const 1)))(local.set $newValue(global.get $frame)(call $sqrt))(local.get $newValue)(i32.const 1)(i32.const -1)(i32.mul)(i32.eq)(br_if $zvSRtkJPRE))))(local.get $x)(local.get $newValue)(call $DrawGraphLine)(global.set $prevValue(local.get $newValue)))(func $DrawSinGraph(param $x i32)(local $newValue i32)(local.set $newValue(local.get $x)(call $sin))(local.get $newValue)(call $printInt)(local.get $x)(local.get $newValue)(call $DrawGraphLine)(global.set $prevValue(local.get $newValue)))(func $start(export "start")(global.get $C_RED)(call $SetDrawColor)(global.set $frame(i32.const 2)(i32.const 8)(call $pow)(i32.const -1)(i32.mul))(i32.const 3837)(i32.const -1)(i32.mul)(call $abs)(call $printInt)(i32.const 3)(call $sin)(call $printInt))(func $MainLoop(export "MainLoop")(global.set $frame(i32.add (global.get $frame)(i32.const 1)))))